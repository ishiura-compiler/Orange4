+{

debug_mode => 0,

  # Multiplication of number of operators  and expressionis
  e_size_num => 1000,

  # main以外の関数を生成するかどうか
  func_generate_flag => 1,
  # 引数の数
  max_args_num => 10,
  # 関数の数
  max_funcs_num => 10,
  # 関数の深さ
  max_depth => 2,

  # 配列を生成するかどうか
  generate_array_flag => 1,
  # x配列の最大数(この数以下の数からランダム + 型の種類数 の配列を生成する)
  x_array_max => 10,
  # t配列の最大数(この数以下の数からランダム + 型の種類数 の配列を生成する)
  t_array_max => 10,
  # 配列の次元数の最大
  array_dim_max => 2,
  # 配列の要素数の最大
  array_element_max => 10,
  # 可変長配列を生成する確率 => 0.2,

  # 構造体共用体型枠の最大数
  max_structs => 10,
  max_unions => 5,
  # 構造体共用体のメンバ変数の最大数
  member_max => 10,
  # メンバ変数が配列になる確率(割)
  prob_array => 1,
  prob_struct => 2,  # x割の確率で構造体が生成される
  # 構造体共用体変数の数
  x_union_struct_var_max => 5,
  t_union_struct_var_max => 5,
  # 構造体共用体のネスト 大きすぎると変数の要素数がエラいことになる
  nest_max => 1,

  # expression_size 中の左辺添字式の割合
  tarray_expression_size => 0.2,

  # 左辺を配列か構造体にするか
  prob_left_var => [
    qw(array array array unionstruct unionstruct unionstruct assign assign assign assign)
  ],
  
  # 関数の引数の種類
  prob_func_arg => [
    qw(var var var var var var struct array)
  ],

  # ノードを新規x変数にするか配列・構造体共用体を参照するか
  prob_ref_node => [
    qw(array array unionstruct unionstruct var var var var var var var)
  ],

  # 代入文のうち可変配列が生成される割合
  prob_vla => 0,
  
  # Name of C file
  source_file => 'x86_64-linux-gcc-test.c',

  # Name of Executable file
  exec_file => 'x86_64-linux-gcc-test.out',

  # Macro (OK) of C source
  macro_ok => 'printf("@OK@\n")',

  # Macro (NG) of C source
  macro_ng => 'printf("@NG@ (test = " fmt ")\n",val)',

  # Command of the compiler with option
  compile_commands => ["gcc -O0", "gcc -O3", "clang -O0",  "clang -O3"],

  # Operators, separated by spaces
  operators => [
    qw(+ + + - - - * * * * * * / / / / / / % % % % % % << << << << << << >> >> >> >> >> >> == != < > <= >= && || | | | & & & ^ ^ ^)
  ],

  # Storage classes, separated by commas
  classes => [ "static", "" ],

  # Modifiers, separated by commas
  # ("const" is unused in some variables.)
  modifiers => [ "const", "volatile", "const volatile", "" ],

  # Types, separated by commas
  types => [
    "signed char",
    "unsigned char",
    "signed short",
    "unsigned short",
    "signed int",
    "unsigned int",
    "signed long",
    "unsigned long",
    "signed long long",
    "unsigned long long",
    #"float",
    #"double",
    #"long double",
  ],

  # Scopes, separated by commas
  scopes => [ "LOCAL", "GLOBAL" ],

  # Loop variable names
  # can't use "c", "k", "t", and "x"
  loop_var_name => [ "i", "j", "l", "m", "n", "o" ],

  # Details of types
  type => {
    "signed char" => {
      order         => 1,
      printf_format => '%d',
      const_suffix  => '',
      bits          => 8,
      min           => -128,
      max           => 127,
    },
    "unsigned char" => {
      order         => 2,
      printf_format => '%u',
      const_suffix  => 'U',
      bits          => 8,
      min           => 0,
      max           => 255,
    },
    "signed short" => {
      order         => 3,
      printf_format => '%hhd',
      const_suffix  => '',
      bits          => 16,
      min           => -32768,
      max           => 32767,
    },
    "unsigned short" => {
      order         => 4,
      printf_format => '%hhu',
      const_suffix  => 'U',
      bits          => 16,
      min           => 0,
      max           => 65535,
    },
    "signed int" => {
      order         => 5,
      printf_format => '%d',
      const_suffix  => '',
      bits          => 32,
      min           => -2147483648,
      max           => 2147483647,
    },
    "unsigned int" => {
      order         => 6,
      printf_format => '%u',
      const_suffix  => 'U',
      bits          => 32,
      min           => 0,
      max           => 4294967295,
    },
    "signed long" => {
      order         => 7,
      printf_format => '%ld',
      const_suffix  => 'L',
      bits          => 64,
      min           => -9223372036854775808,
      max           => 9223372036854775807,
    },
    "unsigned long" => {
      order         => 8,
      printf_format => '%lu',
      const_suffix  => 'LU',
      bits          => 64,
      min           => 0,
      max           => '18446744073709551615',
    },
    "signed long long" => {
      order         => 9,
      printf_format => '%lld',
      const_suffix  => 'LL',
      bits          => 64,
      min           => -9223372036854775808,
      max           => 9223372036854775807,
    },
    "unsigned long long" => {
      order         => 10,
      printf_format => '%llu',
      const_suffix  => 'LLU',
      bits          => 64,
      min           => 0,
      max           => '18446744073709551615',
    },
    "float" => {
      order         => 11,
      printf_format => '%0.42e',
      const_suffix  => 'F',
      bits          => 24,
      min           => -8388608,
      max           => 8388607,
      e_min         => -126,
      e_max         => 127,
      p_min         => '1.175494350822287507968736537222245677818666e-38',
      p_max         => '3.4028234663852885981170418348451692544e+38',
    },
    "double" => {
      order         => 12,
      printf_format => '%0.42e',
      const_suffix  => '',
      bits          => 53,
      min           => -4503599627370496,
      max           => 4503599627370495,
      e_min         => -1022,
      e_max         => 1023,
      p_min         => '2.225073858507201383090232717332404064219216e-308',
      p_max         => '1.797693134862315708145274237317043567980706e+308',
    },
    "long double" => {
      order         => 13,
      printf_format => '%0.42Le',
      const_suffix  => 'L',
      bits          => 65,
      min           => '-18446744073709551616',
      max           => '18446744073709551615',
      e_bits        => 15,
      e_min         => -16382,
      e_max         => 16383,
      p_min         => '3.362103143112093506262677817321752602598079e-4932',
      p_max         => '1.189731495357231765021263853030970205169063e+4932',
    },
  }
}
